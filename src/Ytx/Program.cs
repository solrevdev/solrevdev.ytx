using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using YoutubeExplode;
using YoutubeExplode.Videos;
using YoutubeExplode.Videos.ClosedCaptions;

record Input(string url);

class Output
{
    public string url { get; set; } = "";
    public string title { get; set; } = "";
    public string description { get; set; } = "";
    public string transcriptRaw { get; set; } = "";
    public string transcript { get; set; } = "";
}

static class Program
{
    static async Task<int> Main(string[] args)
    {
        try
        {
            string? url = null;

            if (args.Length == 1 && !string.IsNullOrWhiteSpace(args[0]))
            {
                url = args[0];
            }
            else
            {
                string stdin = Console.IsInputRedirected ? await Console.In.ReadToEndAsync() : "";
                if (!string.IsNullOrWhiteSpace(stdin))
                {
                    var input = JsonSerializer.Deserialize<Input>(stdin.Trim(),
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    url = input?.url;
                }
            }

            if (string.IsNullOrWhiteSpace(url))
            {
                Console.Error.WriteLine("Usage: ytx <YouTube URL>\n   or: echo '{\"url\":\"https://...\"}' | ytx");
                return 2;
            }

            var client = new YoutubeClient();
            var videoId = VideoId.TryParse(url) ?? throw new ArgumentException("Invalid YouTube URL/ID.");
            var video = await client.Videos.GetAsync(videoId);
            var title = video.Title ?? "";
            var description = video.Description ?? "";

            string transcriptRaw = "";
            string transcriptMd = "";

            try
            {
                var manifest = await client.Videos.ClosedCaptions.GetManifestAsync(video.Id);
                var track = manifest.Tracks
                    .OrderByDescending(t => t.Language.Name.Contains("English", StringComparison.OrdinalIgnoreCase))
                    .ThenByDescending(t => t.IsAutoGenerated)
                    .FirstOrDefault();

                if (track != null)
                {
                    var captions = await client.Videos.ClosedCaptions.GetAsync(track);

                    var rawSb = new StringBuilder();
                    var mdSb  = new StringBuilder();

                    foreach (var c in captions.Captions)
                    {
                        var text = NormalizeCaption(c.Text);
                        if (string.IsNullOrWhiteSpace(text)) continue;

                        if (rawSb.Length > 0) rawSb.Append(' ');
                        rawSb.Append(text);

                        var ts = ToHhMmSs(c.Offset);
                        var link = $"https://www.youtube.com/watch?v={video.Id}&t={(int)c.Offset.TotalSeconds}s";
                        mdSb.AppendLine($"- [{ts}]({link}) {text}");
                    }

                    transcriptRaw = rawSb.ToString().Trim();
                    transcriptMd = mdSb.ToString().TrimEnd();
                }
                else
                {
                    transcriptRaw = "";
                    transcriptMd = "_No transcript/captions available for this video._";
                }
            }
            catch
            {
                transcriptRaw = "";
                transcriptMd = "_No transcript/captions available or captions retrieval failed._";
            }

            var output = new Output
            {
                url = url,
                title = title,
                description = description,
                transcriptRaw = transcriptRaw,
                transcript = transcriptMd
            };

            var json = JsonSerializer.Serialize(output, new JsonSerializerOptions
            {
                WriteIndented = true,
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
            });

            Console.OutputEncoding = Encoding.UTF8;
            Console.WriteLine(json);
            return 0;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error: {ex.Message}");
            return 1;
        }
    }

    static string ToHhMmSs(TimeSpan ts)
    {
        int h = (int)ts.TotalHours;
        int m = ts.Minutes;
        int s = ts.Seconds;
        return h > 0 ? $"{h:00}:{m:00}:{s:00}" : $"{m:00}:{s:00}";
    }

    static string NormalizeCaption(string text)
    {
        if (string.IsNullOrWhiteSpace(text)) return "";
        text = Regex.Replace(text, @"\s+", " ").Trim();
        text = text.Replace("&nbsp;", " ");
        return text;
    }
}